#!/usr/bin/env python
#
# Gaussian quadrature.
#
# This algorithm was posted to the ActiveState public code repository
#   by Alex Pletzer, in March of 2001.
#
# http://code.activestate.com/recipes/52292-gaussian-quadrature-with-or-without-log-singularit/?in=user-98107
#
# python imports
import math
import sys
sys.path.append('.')

class RbGaussianQuadrature:

    def __init__(self):
        # load up the coefficients
        self.nodes  =(
            (0.,),
            (-0.5773502691896257,
             0.5773502691896257,),
            (-0.7745966692414834,
             0.,
             0.7745966692414834,),
            (-0.861136311594053,
             -0.3399810435848562,
             0.3399810435848562,
             0.861136311594053,),
            (-0.906179845938664,
             -0.5384693101056829,
             0.,
             0.5384693101056829,
             0.906179845938664,),
            (-0.932469514203152,
             -0.6612093864662646,
             -0.2386191860831968,
             0.2386191860831968,
             0.6612093864662646,
             0.932469514203152,),
            (-0.949107912342759,
             -0.7415311855993937,
             -0.4058451513773972,
             0.,
             0.4058451513773971,
             0.7415311855993945,
             0.949107912342759,),
            (-0.960289856497537,
             -0.7966664774136262,
             -0.5255324099163289,
             -0.1834346424956498,
             0.1834346424956498,
             0.5255324099163289,
             0.7966664774136262,
             0.960289856497537,),
            (-0.968160239507626,
             -0.836031107326637,
             -0.6133714327005903,
             -0.3242534234038088,
             0.,
             0.3242534234038088,
             0.6133714327005908,
             0.836031107326635,
             0.968160239507627,),
            (-0.973906528517172,
             -0.865063366688984,
             -0.6794095682990246,
             -0.433395394129247,
             -0.1488743389816312,
             0.1488743389816312,
             0.433395394129247,
             0.6794095682990246,
             0.865063366688984,
             0.973906528517172,),
            (-0.97822865814604,
             -0.88706259976812,
             -0.7301520055740422,
             -0.5190961292068116,
             -0.2695431559523449,
             0.,
             0.2695431559523449,
             0.5190961292068117,
             0.73015200557405,
             0.887062599768093,
             0.978228658146058,),
            (-0.981560634246732,
             -0.904117256370452,
             -0.7699026741943177,
             -0.5873179542866143,
             -0.3678314989981804,
             -0.1252334085114688,
             0.1252334085114688,
             0.3678314989981804,
             0.5873179542866143,
             0.7699026741943177,
             0.904117256370452,
             0.981560634246732,),
            )
        
        self.weights=(
            (2.,),
            (1.,
             1.,),
            (0.5555555555555553,
             0.888888888888889,
             0.5555555555555553,),
            (0.3478548451374539,
             0.6521451548625462,
             0.6521451548625462,
             0.3478548451374539,),
            (0.2369268850561887,
             0.4786286704993665,
             0.5688888888888889,
             0.4786286704993665,
             0.2369268850561887,),
            (0.1713244923791709,
             0.3607615730481379,
             0.4679139345726913,
             0.4679139345726913,
             0.3607615730481379,
             0.1713244923791709,),
            (0.129484966168868,
             0.2797053914892783,
             0.3818300505051186,
             0.4179591836734694,
             0.3818300505051188,
             0.279705391489276,
             0.1294849661688697,),
            (0.1012285362903738,
             0.2223810344533786,
             0.3137066458778874,
             0.3626837833783619,
             0.3626837833783619,
             0.3137066458778874,
             0.2223810344533786,
             0.1012285362903738,),
            (0.0812743883615759,
             0.1806481606948543,
             0.2606106964029356,
             0.3123470770400029,
             0.3302393550012597,
             0.3123470770400025,
             0.2606106964029353,
             0.1806481606948577,
             0.0812743883615721,),
            (0.06667134430868681,
             0.149451349150573,
             0.2190863625159832,
             0.2692667193099968,
             0.2955242247147529,
             0.2955242247147529,
             0.2692667193099968,
             0.2190863625159832,
             0.149451349150573,
             0.06667134430868681,),
            (0.05566856711621584,
             0.1255803694648743,
             0.1862902109277404,
             0.2331937645919927,
             0.2628045445102466,
             0.2729250867779006,
             0.2628045445102466,
             0.2331937645919933,
             0.1862902109277339,
             0.1255803694649132,
             0.05566856711616958,),
            (0.04717533638647547,
             0.1069393259953637,
             0.1600783285433586,
             0.2031674267230672,
             0.2334925365383534,
             0.2491470458134027,
             0.2491470458134027,
             0.2334925365383534,
             0.2031674267230672,
             0.1600783285433586,
             0.1069393259953637,
             0.04717533638647547,),
            )

        # define class variables 
        self.maxOrder = len(self.nodes)
        self.minOrder = 1

        return

# Gauss quadature (weight function = 1.0):
# uMin, uMax: boundaries of integration domain
# function:   integrand function
# extX:       external input 'x'
# extY:       external input 'y'
# extZ:       external input 'z'
# nOrder:     Gauss integration order
    def gaussQuadPletzer(self, uMin, uMax, function, extX, extY, extZ, nOrder):
        nOrder = max(min(nOrder, self.maxOrder), self.minOrder)
        ns = self.nodes[nOrder-1]
        ws = self.weights[nOrder-1]
        du = uMax - uMin
        us = [(du*alpha + uMin + uMax)/2. for alpha in ns]
        return 0.5*du*sum(function(u,extX,extY,extZ)*w for u,w in zip(us,ws))
